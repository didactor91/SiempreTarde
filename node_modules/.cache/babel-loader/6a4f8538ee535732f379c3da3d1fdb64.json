{"ast":null,"code":"import normalize from '../common/normalize';\nimport validate from '../common/validate';\nimport userApi from '../data/user-api';\nimport { LogicError } from '../common/errors';\nimport { PasswordError } from '../common/errors';\nconst logic = {\n  set __userId__(id) {\n    sessionStorage.userId = id;\n  },\n\n  get __userId__() {\n    return normalize.undefinedOrNull(sessionStorage.userId);\n  },\n\n  set __userToken__(token) {\n    sessionStorage.userToken = token;\n  },\n\n  get __userToken__() {\n    return normalize.undefinedOrNull(sessionStorage.userToken);\n  },\n\n  get isUserLoggedIn() {\n    return !!(this.__userId__ && this.__userToken__);\n  },\n\n  registerUser(name, surname, email, password, password2) {\n    validate.arguments([{\n      name: 'name',\n      value: name,\n      type: 'string',\n      notEmpty: true\n    }, {\n      name: 'surname',\n      value: surname,\n      type: 'string',\n      notEmpty: true\n    }, {\n      name: 'email',\n      value: email,\n      type: 'string',\n      notEmpty: true\n    }, {\n      name: 'password',\n      value: password,\n      type: 'string',\n      notEmpty: true\n    }, {\n      name: 'password2',\n      value: password2,\n      type: 'string',\n      notEmpty: true\n    }]);\n    validate.email(email);\n    if (password !== password2) throw new PasswordError(\"Password don't match\");\n    return userApi.create(email, password, {\n      name,\n      surname\n    }).then(response => {\n      if (response.status === 'OK') return;\n      throw new LogicError(response.error);\n    });\n  },\n\n  loginUser(email, password) {\n    validate.arguments([{\n      name: 'email',\n      value: email,\n      type: 'string',\n      notEmpty: true\n    }, {\n      name: 'password',\n      value: password,\n      type: 'string',\n      notEmpty: true\n    }]);\n    validate.email(email);\n    return userApi.authenticate(email, password).then(response => {\n      if (response.status === 'OK') {\n        const _response$data = response.data,\n              id = _response$data.id,\n              token = _response$data.token;\n        this.__userId__ = id;\n        this.__userToken__ = token;\n      } else throw new LogicError(response.error);\n    });\n  },\n\n  retrieveUser() {\n    return userApi.retrieve(this.__userId__, this.__userToken__).then(response => {\n      if (response.status === 'OK') {\n        const _response$data2 = response.data,\n              name = _response$data2.name,\n              surname = _response$data2.surname,\n              email = _response$data2.username;\n        return {\n          name,\n          surname,\n          email\n        };\n      } else throw new LogicError(response.error);\n    });\n  },\n\n  logoutUser() {\n    sessionStorage.clear();\n  },\n\n  addFavorites() {//TODO\n  },\n\n  retrieveFavorites() {//TODO\n  }\n\n};\nexport default logic;","map":{"version":3,"sources":["/Users/didactor/Documents/skylab/bootcamp/collab/skylab-bootcamp-201904/staff/groups/aldi/siempre-tarde/src/logic/index.js"],"names":["normalize","validate","userApi","LogicError","PasswordError","logic","__userId__","id","sessionStorage","userId","undefinedOrNull","__userToken__","token","userToken","isUserLoggedIn","registerUser","name","surname","email","password","password2","arguments","value","type","notEmpty","create","then","response","status","error","loginUser","authenticate","data","retrieveUser","retrieve","username","logoutUser","clear","addFavorites","retrieveFavorites"],"mappings":"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","sourcesContent":["import normalize from '../common/normalize'\nimport validate from '../common/validate'\nimport userApi from '../data/user-api'\nimport { LogicError } from '../common/errors'\nimport { PasswordError } from '../common/errors'\n\n\n\nconst logic = {\n    set __userId__(id) {\n        sessionStorage.userId = id\n    },\n\n    get __userId__() {\n        return normalize.undefinedOrNull(sessionStorage.userId)\n    },\n\n    set __userToken__(token) {\n        sessionStorage.userToken = token\n    },\n\n    get __userToken__() {\n        return normalize.undefinedOrNull(sessionStorage.userToken)\n    },\n\n    get isUserLoggedIn() {\n        return !!(this.__userId__ && this.__userToken__)\n    },\n\n    registerUser(name, surname, email, password, password2) {\n       \n        validate.arguments([\n            { name: 'name', value: name, type: 'string', notEmpty: true },\n            { name: 'surname', value: surname, type: 'string', notEmpty: true },\n            { name: 'email', value: email, type: 'string', notEmpty: true },\n            { name: 'password', value: password, type: 'string', notEmpty: true },\n            { name: 'password2', value: password2, type: 'string', notEmpty: true }\n        ])\n\n        validate.email(email)\n\n        if (password !== password2) throw new PasswordError(\"Password don't match\")\n\n        return userApi.create(email, password, { name, surname })\n            .then(response => {\n                if (response.status === 'OK') return\n\n                throw new LogicError(response.error)\n            })\n    },\n\n    loginUser(email, password) {\n        validate.arguments([\n            { name: 'email', value: email, type: 'string', notEmpty: true },\n            { name: 'password', value: password, type: 'string', notEmpty: true }\n        ])\n\n        validate.email(email)\n\n        return userApi.authenticate(email, password)\n            .then(response => {\n                if (response.status === 'OK') {\n                    const { data: { id, token } } = response\n\n                    this.__userId__ = id\n                    this.__userToken__ = token\n                } else throw new LogicError(response.error)\n            })\n    },\n\n    retrieveUser() {\n        return userApi.retrieve(this.__userId__, this.__userToken__)\n            .then(response => {\n                if (response.status === 'OK') {\n                    const { data: { name, surname, username: email } } = response\n\n                    return { name, surname, email }\n                } else throw new LogicError(response.error)\n            })\n    },\n\n    logoutUser() {\n        sessionStorage.clear()\n    },\n\n    addFavorites() {\n        //TODO\n    },\n\n\n    retrieveFavorites() {\n        //TODO\n    }\n\n\n\n\n}\n\nexport default logic"]},"metadata":{},"sourceType":"module"}