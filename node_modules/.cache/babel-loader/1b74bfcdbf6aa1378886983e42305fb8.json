{"ast":null,"code":"import validate from '../validate';\nimport { ConnectionError, TimeoutError } from '../errors';\n/**\n * Makes an HTTP call.\n * \n * @param {*} url \n * @param {*} callback \n * @param {*} options \n * \n * @version 4.0.0\n */\n\nfunction call(url, options = {}) {\n  const _options$method = options.method,\n        method = _options$method === void 0 ? 'GET' : _options$method,\n        headers = options.headers,\n        body = options.body,\n        _options$timeout = options.timeout,\n        timeout = _options$timeout === void 0 ? 0 : _options$timeout;\n  validate.arguments([{\n    name: 'url',\n    value: url,\n    type: 'string',\n    notEmpty: true\n  }, {\n    name: 'method',\n    value: method,\n    type: 'string',\n    notEmpty: true\n  }, {\n    name: 'headers',\n    value: headers,\n    type: 'object',\n    optional: true\n  }, {\n    name: 'body',\n    value: body,\n    type: 'string',\n    notEmpty: true,\n    optional: true\n  }, {\n    name: 'timeout',\n    value: timeout,\n    type: 'number',\n    notEmpty: true,\n    optional: true\n  }]);\n  validate.url(url);\n  let signal;\n\n  if (timeout) {\n    const controller = new AbortController();\n    signal = controller.signal;\n    setTimeout(() => controller.abort(), timeout);\n  }\n\n  return fetch(url, {\n    method,\n    headers,\n    body,\n    signal\n  }).catch(error => {\n    if (error instanceof TypeError) throw new ConnectionError('cannot connect');else if (error instanceof DOMException) throw new TimeoutError(\"time out, exceeded limit of \".concat(timeout, \"ms\"));else throw error;\n  });\n}\n\nexport default call;","map":{"version":3,"sources":["/Users/didactor/Documents/skylab/bootcamp/collab/skylab-bootcamp-201904/staff/groups/aldi/siempre-tarde/src/common/call/index.js"],"names":["validate","ConnectionError","TimeoutError","call","url","options","method","headers","body","timeout","arguments","name","value","type","notEmpty","optional","signal","controller","AbortController","setTimeout","abort","fetch","catch","error","TypeError","DOMException"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,aAArB;AACA,SAASC,eAAT,EAA0BC,YAA1B,QAA8C,WAA9C;AAEA;;;;;;;;;;AASA,SAASC,IAAT,CAAcC,GAAd,EAAmBC,OAAO,GAAG,EAA7B,EAAiC;AAAA,0BAC0BA,OAD1B,CACrBC,MADqB;AAAA,QACrBA,MADqB,gCACZ,KADY;AAAA,QACLC,OADK,GAC0BF,OAD1B,CACLE,OADK;AAAA,QACIC,IADJ,GAC0BH,OAD1B,CACIG,IADJ;AAAA,2BAC0BH,OAD1B,CACUI,OADV;AAAA,QACUA,OADV,iCACoB,CADpB;AAG7BT,EAAAA,QAAQ,CAACU,SAAT,CAAmB,CACf;AAAEC,IAAAA,IAAI,EAAE,KAAR;AAAeC,IAAAA,KAAK,EAAER,GAAtB;AAA2BS,IAAAA,IAAI,EAAE,QAAjC;AAA2CC,IAAAA,QAAQ,EAAE;AAArD,GADe,EAEf;AAAEH,IAAAA,IAAI,EAAE,QAAR;AAAkBC,IAAAA,KAAK,EAAEN,MAAzB;AAAiCO,IAAAA,IAAI,EAAE,QAAvC;AAAiDC,IAAAA,QAAQ,EAAE;AAA3D,GAFe,EAGf;AAAEH,IAAAA,IAAI,EAAE,SAAR;AAAmBC,IAAAA,KAAK,EAAEL,OAA1B;AAAmCM,IAAAA,IAAI,EAAE,QAAzC;AAAmDE,IAAAA,QAAQ,EAAE;AAA7D,GAHe,EAIf;AAAEJ,IAAAA,IAAI,EAAE,MAAR;AAAgBC,IAAAA,KAAK,EAAEJ,IAAvB;AAA6BK,IAAAA,IAAI,EAAE,QAAnC;AAA6CC,IAAAA,QAAQ,EAAE,IAAvD;AAA6DC,IAAAA,QAAQ,EAAE;AAAvE,GAJe,EAKf;AAAEJ,IAAAA,IAAI,EAAE,SAAR;AAAmBC,IAAAA,KAAK,EAAEH,OAA1B;AAAmCI,IAAAA,IAAI,EAAE,QAAzC;AAAmDC,IAAAA,QAAQ,EAAE,IAA7D;AAAmEC,IAAAA,QAAQ,EAAE;AAA7E,GALe,CAAnB;AAQAf,EAAAA,QAAQ,CAACI,GAAT,CAAaA,GAAb;AAEA,MAAIY,MAAJ;;AAEA,MAAIP,OAAJ,EAAa;AACT,UAAMQ,UAAU,GAAG,IAAIC,eAAJ,EAAnB;AACAF,IAAAA,MAAM,GAAGC,UAAU,CAACD,MAApB;AACAG,IAAAA,UAAU,CAAC,MAAMF,UAAU,CAACG,KAAX,EAAP,EAA2BX,OAA3B,CAAV;AACH;;AAED,SAAOY,KAAK,CAACjB,GAAD,EAAM;AACdE,IAAAA,MADc;AAEdC,IAAAA,OAFc;AAGdC,IAAAA,IAHc;AAIdQ,IAAAA;AAJc,GAAN,CAAL,CAMFM,KANE,CAMIC,KAAK,IAAI;AACZ,QAAIA,KAAK,YAAYC,SAArB,EAAgC,MAAM,IAAIvB,eAAJ,CAAoB,gBAApB,CAAN,CAAhC,KACK,IAAIsB,KAAK,YAAYE,YAArB,EAAmC,MAAM,IAAIvB,YAAJ,uCAAgDO,OAAhD,QAAN,CAAnC,KACA,MAAMc,KAAN;AACR,GAVE,CAAP;AAWH;;AAED,eAAepB,IAAf","sourcesContent":["import validate from '../validate'\nimport { ConnectionError, TimeoutError } from '../errors'\n\n/**\n * Makes an HTTP call.\n * \n * @param {*} url \n * @param {*} callback \n * @param {*} options \n * \n * @version 4.0.0\n */\nfunction call(url, options = {}) {\n    const { method = 'GET', headers, body, timeout = 0 } = options\n\n    validate.arguments([\n        { name: 'url', value: url, type: 'string', notEmpty: true },\n        { name: 'method', value: method, type: 'string', notEmpty: true },\n        { name: 'headers', value: headers, type: 'object', optional: true },\n        { name: 'body', value: body, type: 'string', notEmpty: true, optional: true },\n        { name: 'timeout', value: timeout, type: 'number', notEmpty: true, optional: true },\n    ])\n\n    validate.url(url)\n\n    let signal\n\n    if (timeout) {\n        const controller = new AbortController()\n        signal = controller.signal\n        setTimeout(() => controller.abort(), timeout)\n    }\n\n    return fetch(url, {\n        method,\n        headers,\n        body,\n        signal\n    })\n        .catch(error => {\n            if (error instanceof TypeError) throw new ConnectionError('cannot connect')\n            else if (error instanceof DOMException) throw new TimeoutError(`time out, exceeded limit of ${timeout}ms`)\n            else throw error\n        })\n}\n\nexport default call"]},"metadata":{},"sourceType":"module"}