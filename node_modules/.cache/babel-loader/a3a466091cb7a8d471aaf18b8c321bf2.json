{"ast":null,"code":"import normalize from '../common/normalize';\nimport validate from '../common/validate';\nimport userApi from '../data/user-api';\nimport { LogicError, DirectionError, PasswordError } from '../common/errors';\nimport iBusApi from '../data/ibus-api';\nimport transitApi from '../data/transit-api';\nconst logic = {\n  set __userId__(id) {\n    sessionStorage.userId = id;\n  },\n\n  get __userId__() {\n    return normalize.undefinedOrNull(sessionStorage.userId);\n  },\n\n  set __userToken__(token) {\n    sessionStorage.userToken = token;\n  },\n\n  get __userToken__() {\n    return normalize.undefinedOrNull(sessionStorage.userToken);\n  },\n\n  get isUserLoggedIn() {\n    return !!(this.__userId__ && this.__userToken__);\n  },\n\n  registerUser(name, surname, email, password, password2) {\n    validate.arguments([{\n      name: 'name',\n      value: name,\n      type: 'string',\n      notEmpty: true\n    }, {\n      name: 'surname',\n      value: surname,\n      type: 'string',\n      notEmpty: true\n    }, {\n      name: 'email',\n      value: email,\n      type: 'string',\n      notEmpty: true\n    }, {\n      name: 'password',\n      value: password,\n      type: 'string',\n      notEmpty: true\n    }, {\n      name: 'password2',\n      value: password2,\n      type: 'string',\n      notEmpty: true\n    }]);\n    validate.email(email);\n    if (password !== password2) throw new PasswordError(\"Password don't match\");\n    return userApi.create(email, password, {\n      name,\n      surname\n    }).then(response => {\n      if (response.status === 'OK') return;\n      throw new LogicError(response.error);\n    });\n  },\n\n  loginUser(email, password) {\n    validate.arguments([{\n      name: 'email',\n      value: email,\n      type: 'string',\n      notEmpty: true\n    }, {\n      name: 'password',\n      value: password,\n      type: 'string',\n      notEmpty: true\n    }]);\n    validate.email(email);\n    return userApi.authenticate(email, password).then(response => {\n      if (response.status === 'OK') {\n        const _response$data = response.data,\n              id = _response$data.id,\n              token = _response$data.token;\n        this.__userId__ = id;\n        this.__userToken__ = token;\n      } else throw new LogicError(response.error);\n    });\n  },\n\n  retrieveUser() {\n    return userApi.retrieve(this.__userId__, this.__userToken__).then(response => {\n      if (response.status === 'OK') {\n        const _response$data2 = response.data,\n              name = _response$data2.name,\n              surname = _response$data2.surname,\n              email = _response$data2.username;\n        return {\n          name,\n          surname,\n          email\n        };\n      } else throw new LogicError(response.error);\n    });\n  },\n\n  logoutUser() {\n    sessionStorage.clear();\n  },\n\n  addFavorites() {//TODO\n  },\n\n  retrieveFavorites() {//TODO\n  },\n\n  retrieveBusLines(line_id) {\n    validate.arguments([{\n      name: 'line_id',\n      value: line_id,\n      type: 'number',\n      notEmpty: true,\n      optional: true\n    }]);\n    return transitApi.retrieveBusLine(line_id).then(response => {\n      const features = response.features;\n      return features.map(({\n        properties: {\n          \"CODI_LINIA\": line_id,\n          \"NOM_LINIA\": name_line,\n          \"DESC_LINIA\": desc_line,\n          \"ORIGEN_LINIA\": origin_line,\n          \"DESTI_LINIA\": dest_line,\n          \"COLOR_LINIA\": color_line\n        }\n      }) => {\n        return {\n          line_id,\n          name_line,\n          desc_line,\n          origin_line,\n          dest_line,\n          color_line\n        };\n      });\n    });\n  },\n\n  retrieveBusLineRoute(line_id) {\n    validate.arguments([{\n      name: 'line_id',\n      value: line_id,\n      type: 'number',\n      notEmpty: true,\n      optional: false\n    }]);\n    return transitApi.retrieveBusLineRoute(line_id).then(response => {\n      const features = response.features;\n      return features.map(({\n        properties: {\n          \"SENTIT\": direction_id,\n          \"DESTI_SENTIT\": direction_name\n        }\n      }) => {\n        return {\n          direction_id,\n          direction_name\n        };\n      });\n    });\n  },\n\n  retrieveBusStops(line_id, direction_id) {\n    validate.arguments([{\n      name: 'line_id',\n      value: line_id,\n      type: 'number',\n      notEmpty: true,\n      optional: false\n    }, {\n      name: 'direction_id',\n      value: direction_id,\n      type: 'string',\n      notEmpty: true,\n      optional: false\n    }]);\n\n    if (direction_id !== 'A' || direction_id !== 'T') {\n      throw new DirectionError('direction is not valid');\n    }\n\n    return transitApi.retrieveBusStops(line_id).then(response => {\n      const features = response.features;\n      let stops = [];\n      features.forEach(e => {\n        const _e$properties = e.properties,\n              stop_id = _e$properties[\"CODI_PARADA\"],\n              stop_name = _e$properties[\"NOM_PARADA\"],\n              direction = _e$properties[\"SENTIT\"];\n\n        if (direction === direction_id) {\n          stops.push({\n            stop_id,\n            stop_name\n          });\n        }\n      });\n      return stops;\n    });\n  }\n\n};\nexport default logic;","map":{"version":3,"sources":["/Users/didactor/Documents/skylab/bootcamp/collab/skylab-bootcamp-201904/staff/groups/aldi/siempre-tarde/src/logic/index.js"],"names":["normalize","validate","userApi","LogicError","DirectionError","PasswordError","iBusApi","transitApi","logic","__userId__","id","sessionStorage","userId","undefinedOrNull","__userToken__","token","userToken","isUserLoggedIn","registerUser","name","surname","email","password","password2","arguments","value","type","notEmpty","create","then","response","status","error","loginUser","authenticate","data","retrieveUser","retrieve","username","logoutUser","clear","addFavorites","retrieveFavorites","retrieveBusLines","line_id","optional","retrieveBusLine","features","map","properties","name_line","desc_line","origin_line","dest_line","color_line","retrieveBusLineRoute","direction_id","direction_name","retrieveBusStops","stops","forEach","e","stop_id","stop_name","direction","push"],"mappings":"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","sourcesContent":["import normalize from '../common/normalize'\nimport validate from '../common/validate'\nimport userApi from '../data/user-api'\nimport { LogicError, DirectionError, PasswordError } from '../common/errors'\nimport iBusApi from '../data/ibus-api'\nimport transitApi from '../data/transit-api'\n\n\n\nconst logic = {\n\n    set __userId__(id) {\n        sessionStorage.userId = id\n    },\n\n    get __userId__() {\n        return normalize.undefinedOrNull(sessionStorage.userId)\n    },\n\n    set __userToken__(token) {\n        sessionStorage.userToken = token\n    },\n\n    get __userToken__() {\n        return normalize.undefinedOrNull(sessionStorage.userToken)\n    },\n\n    get isUserLoggedIn() {\n        return !!(this.__userId__ && this.__userToken__)\n    },\n\n    registerUser(name, surname, email, password, password2) {\n\n        validate.arguments([\n            { name: 'name', value: name, type: 'string', notEmpty: true },\n            { name: 'surname', value: surname, type: 'string', notEmpty: true },\n            { name: 'email', value: email, type: 'string', notEmpty: true },\n            { name: 'password', value: password, type: 'string', notEmpty: true },\n            { name: 'password2', value: password2, type: 'string', notEmpty: true }\n        ])\n\n        validate.email(email)\n\n        if (password !== password2) throw new PasswordError(\"Password don't match\")\n\n        return userApi.create(email, password, { name, surname })\n            .then(response => {\n                if (response.status === 'OK') return\n\n                throw new LogicError(response.error)\n            })\n    },\n\n    loginUser(email, password) {\n        validate.arguments([\n            { name: 'email', value: email, type: 'string', notEmpty: true },\n            { name: 'password', value: password, type: 'string', notEmpty: true }\n        ])\n\n        validate.email(email)\n\n        return userApi.authenticate(email, password)\n            .then(response => {\n                if (response.status === 'OK') {\n                    const { data: { id, token } } = response\n\n                    this.__userId__ = id\n                    this.__userToken__ = token\n                } else throw new LogicError(response.error)\n            })\n    },\n\n    retrieveUser() {\n        return userApi.retrieve(this.__userId__, this.__userToken__)\n            .then(response => {\n                if (response.status === 'OK') {\n                    const { data: { name, surname, username: email } } = response\n\n                    return { name, surname, email }\n                } else throw new LogicError(response.error)\n            })\n    },\n\n    logoutUser() {\n        sessionStorage.clear()\n    },\n\n\n    addFavorites() {\n        //TODO\n    },\n\n\n    retrieveFavorites() {\n        //TODO\n    },\n\n\n    retrieveBusLines(line_id) {\n\n        validate.arguments([\n            { name: 'line_id', value: line_id, type: 'number', notEmpty: true, optional: true }\n        ])\n\n        return transitApi.retrieveBusLine(line_id)\n            .then(response => {\n                const { features } = response\n\n                return features.map(({ properties:\n                    { \"CODI_LINIA\": line_id,\n                        \"NOM_LINIA\": name_line,\n                        \"DESC_LINIA\": desc_line,\n                        \"ORIGEN_LINIA\": origin_line,\n                        \"DESTI_LINIA\": dest_line,\n                        \"COLOR_LINIA\": color_line\n                    }\n                }) => {\n                    return { line_id, name_line, desc_line, origin_line, dest_line, color_line }\n                })\n            })\n    },\n\n\n    retrieveBusLineRoute(line_id) {\n\n        validate.arguments([\n            { name: 'line_id', value: line_id, type: 'number', notEmpty: true, optional: false }\n        ])\n\n        return transitApi.retrieveBusLineRoute(line_id)\n            .then(response => {\n                const { features } = response\n\n                return features.map(({ properties:\n                    { \"SENTIT\": direction_id,\n                        \"DESTI_SENTIT\": direction_name\n                    }\n                }) => {\n                    return { direction_id, direction_name }\n                })\n            })\n    },\n\n\n    retrieveBusStops(line_id, direction_id) {\n\n        validate.arguments([\n            { name: 'line_id', value: line_id, type: 'number', notEmpty: true, optional: false },\n            { name: 'direction_id', value: direction_id, type: 'string', notEmpty: true, optional: false }\n        ])\n\n        if (direction_id !== 'A' || direction_id !== 'T') { throw new DirectionError('direction is not valid')}\n\n\n        return transitApi.retrieveBusStops(line_id)\n            .then(response => {\n                const { features } = response\n\n                let stops = []\n\n                features.forEach(e => {\n                    const { properties:\n                        { \"CODI_PARADA\": stop_id,\n                            \"NOM_PARADA\": stop_name,\n                            \"SENTIT\": direction\n                        }\n                    } = e\n                    if (direction === direction_id) {\n                        stops.push({ stop_id, stop_name })\n                    }                   \n\n                })\n\n                return stops\n                \n            })\n\n\n    }\n\n}\n\nexport default logic"]},"metadata":{},"sourceType":"module"}