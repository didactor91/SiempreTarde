{"ast":null,"code":"import _slicedToArray from \"/Users/didactor/Documents/skylab/bootcamp/collab/skylab-bootcamp-201904/staff/groups/aldi/siempre-tarde/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport normalize from '../common/normalize';\nimport validate from '../common/validate';\nimport userApi from '../data/user-api';\nimport { LogicError, DirectionError, PasswordError, NoDataError } from '../common/errors';\nimport iBusApi from '../data/ibus-api';\nimport transitApi from '../data/transit-api';\nconst logic = {\n  set __userId__(id) {\n    sessionStorage.userId = id;\n  },\n\n  get __userId__() {\n    return normalize.undefinedOrNull(sessionStorage.userId);\n  },\n\n  set __userToken__(token) {\n    sessionStorage.userToken = token;\n  },\n\n  get __userToken__() {\n    return normalize.undefinedOrNull(sessionStorage.userToken);\n  },\n\n  get isUserLoggedIn() {\n    return !!(this.__userId__ && this.__userToken__);\n  },\n\n  registerUser(name, surname, email, password, password2) {\n    validate.arguments([{\n      name: 'name',\n      value: name,\n      type: 'string',\n      notEmpty: true\n    }, {\n      name: 'surname',\n      value: surname,\n      type: 'string',\n      notEmpty: true\n    }, {\n      name: 'email',\n      value: email,\n      type: 'string',\n      notEmpty: true\n    }, {\n      name: 'password',\n      value: password,\n      type: 'string',\n      notEmpty: true\n    }, {\n      name: 'password2',\n      value: password2,\n      type: 'string',\n      notEmpty: true\n    }]);\n    validate.email(email);\n    if (password !== password2) throw new PasswordError(\"Password don't match\");\n    return userApi.create(email, password, {\n      name,\n      surname\n    }).then(response => {\n      if (response.status === 'OK') return;\n      throw new LogicError(response.error);\n    });\n  },\n\n  loginUser(email, password) {\n    validate.arguments([{\n      name: 'email',\n      value: email,\n      type: 'string',\n      notEmpty: true\n    }, {\n      name: 'password',\n      value: password,\n      type: 'string',\n      notEmpty: true\n    }]);\n    validate.email(email);\n    return userApi.authenticate(email, password).then(response => {\n      if (response.status === 'OK') {\n        const _response$data = response.data,\n              id = _response$data.id,\n              token = _response$data.token;\n        this.__userId__ = id;\n        this.__userToken__ = token;\n      } else throw new LogicError(response.error);\n    });\n  },\n\n  retrieveUser() {\n    return userApi.retrieve(this.__userId__, this.__userToken__).then(response => {\n      if (response.status === 'OK') {\n        const _response$data2 = response.data,\n              name = _response$data2.name,\n              surname = _response$data2.surname,\n              email = _response$data2.username;\n        return {\n          name,\n          surname,\n          email\n        };\n      } else throw new LogicError(response.error);\n    });\n  },\n\n  logoutUser() {\n    sessionStorage.clear();\n  },\n\n  toggleFavStop(stop_id) {\n    validate.arguments([{\n      name: 'stop',\n      value: stop_id,\n      type: 'number'\n    }]);\n    return userApi.retrieve(this.__userId__, this.__userToken__).then(response => {\n      const status = response.status,\n            data = response.data;\n\n      if (status === 'OK') {\n        const _data$aldiFavorites = data.aldiFavorites,\n              aldiFavorites = _data$aldiFavorites === void 0 ? [] : _data$aldiFavorites;\n        const index = aldiFavorites.indexOf(stop_id);\n        if (index < 0) aldiFavorites.push(stop_id);else aldiFavorites.splice(index, 1);\n        return userApi.update(this.__userId__, this.__userToken__, {\n          aldiFavorites\n        }).then(() => {});\n      }\n\n      throw new LogicError(response.error);\n    });\n  },\n\n  retrieveFavStops() {\n    let aldiFav = [];\n    return userApi.retrieve(this.__userId__, this.__userToken__).then(response => {\n      debugger;\n      const status = response.status,\n            data = response.data;\n\n      if (status === 'OK') {\n        const _data$aldiFavorites2 = data.aldiFavorites,\n              aldiFavorites = _data$aldiFavorites2 === void 0 ? [] : _data$aldiFavorites2;\n\n        if (aldiFavorites.length) {\n          const calls = aldiFavorites.map(stop_id => transitApi.retrieveStop(stop_id));\n          debugger;\n          return Promise.all(calls).then(response => {\n            return response.map(({\n              features: [{\n                properties: {\n                  \"CODI_PARADA\": stop_id,\n                  \"NOM_PARADA\": stop_name\n                }\n              }]\n            }) => ({\n              stop_id,\n              stop_name\n            }));\n          });\n        } else {\n          return aldiFavorites;\n        }\n      } else throw new LogicError(response.error);\n    });\n  },\n\n  retrieveBusLines(line_id) {\n    validate.arguments([{\n      name: 'line_id',\n      value: line_id,\n      type: 'number',\n      notEmpty: true,\n      optional: true\n    }]);\n    debugger;\n    return transitApi.retrieveBusLine(line_id).then(response => {\n      const features = response.features;\n      return features.map(({\n        properties: {\n          \"CODI_LINIA\": line_id,\n          \"NOM_LINIA\": name_line,\n          \"DESC_LINIA\": desc_line,\n          \"ORIGEN_LINIA\": origin_line,\n          \"DESTI_LINIA\": dest_line,\n          \"COLOR_LINIA\": color_line\n        }\n      }) => {\n        return {\n          line_id,\n          name_line,\n          desc_line,\n          origin_line,\n          dest_line,\n          color_line\n        };\n      });\n    });\n  },\n\n  retrieveBusLineRoute(line_id) {\n    validate.arguments([{\n      name: 'line_id',\n      value: line_id,\n      type: 'number',\n      notEmpty: true,\n      optional: false\n    }]);\n    return transitApi.retrieveBusLineRoute(line_id).then(response => {\n      const features = response.features;\n      return features.map(({\n        properties: {\n          \"SENTIT\": direction_id,\n          \"DESTI_SENTIT\": direction_name\n        }\n      }) => {\n        return {\n          direction_id,\n          direction_name\n        };\n      });\n    });\n  },\n\n  retrieveBusStops(line_id, direction_id) {\n    validate.arguments([{\n      name: 'line_id',\n      value: line_id,\n      type: 'number',\n      notEmpty: true,\n      optional: false\n    }, {\n      name: 'direction_id',\n      value: direction_id,\n      type: 'string',\n      notEmpty: true,\n      optional: false\n    }]);\n\n    if (direction_id !== 'A' && direction_id !== 'T') {\n      throw new DirectionError('direction is not valid');\n    }\n\n    return transitApi.retrieveBusStops(line_id).then(response => {\n      const features = response.features;\n      let stops = [];\n      features.forEach(e => {\n        const _e$properties = e.properties,\n              stop_id = _e$properties[\"CODI_PARADA\"],\n              stop_name = _e$properties[\"NOM_PARADA\"],\n              direction = _e$properties[\"SENTIT\"];\n\n        if (direction === direction_id) {\n          stops.push({\n            stop_id,\n            stop_name\n          });\n        }\n      });\n      return stops;\n    });\n  },\n\n  upcomingBusesByStop(stop_id) {\n    validate.arguments([{\n      name: 'stop',\n      value: stop_id,\n      type: 'number',\n      notEmpty: true,\n      optional: false\n    }]);\n    let buses = [];\n    let stop_name = '';\n    return transitApi.retrieveStop(stop_id).then(response => {\n      const _response$features = _slicedToArray(response.features, 1),\n            _stop_name = _response$features[0].properties[\"NOM_PARADA\"];\n\n      stop_name = _stop_name;\n      return iBusApi.retrieveStopId(stop_id);\n    }).then(response => {\n      const ibus = response.data.ibus;\n      if (ibus.length === 0) throw new NoDataError('no data recived');\n      return ibus.map((bus, index) => {\n        const line = bus.line,\n              t_in_min = bus[\"t-in-min\"],\n              t_in_s = bus[\"t-in-s\"],\n              text_ca = bus[\"text-ca\"];\n        buses[index] = {\n          line,\n          t_in_min,\n          t_in_s,\n          text_ca\n        };\n        return transitApi.retrieveBusLine();\n      });\n    }).then(res => Promise.all(res).then(response => {\n      return response.map(({\n        features\n      }) => {\n        return features.map(({\n          properties: {\n            \"CODI_LINIA\": line_id,\n            \"NOM_LINIA\": name_line,\n            \"DESC_LINIA\": desc_line,\n            \"ORIGEN_LINIA\": origin_line,\n            \"DESTI_LINIA\": dest_line,\n            \"COLOR_LINIA\": color_line\n          }\n        }) => {\n          return {\n            line_id,\n            name_line,\n            desc_line,\n            origin_line,\n            dest_line,\n            color_line\n          };\n        });\n      });\n    })).then(resp => {\n      let upcomingBuses = [];\n      resp.map((arr, index) => {\n        let lineFind = false;\n        let i = 0;\n        let color_line = '#000000';\n        let dest_line = '';\n        let name_line = '';\n        let desc_line = '';\n        let origin_line = '';\n\n        while (i < arr.length && !lineFind) {\n          if (arr[i].name_line === buses[index].line) {\n            color_line = arr[i].color_line;\n            dest_line = arr[i].dest_line;\n            name_line = arr[i].name_line;\n            desc_line = arr[i].desc_line;\n            origin_line = arr[i].origin_line;\n            lineFind = true;\n          } else {\n            i++;\n          }\n        }\n\n        upcomingBuses.push({\n          line: buses[index].line,\n          t_in_min: buses[index].t_in_min,\n          t_in_s: buses[index].t_in_s,\n          text_ca: buses[index].text_ca,\n          color_line,\n          dest_line,\n          name_line,\n          desc_line,\n          origin_line,\n          stop_id,\n          stop_name: stop_name\n        });\n      });\n      return upcomingBuses;\n    });\n  },\n\n  upcomingBusesByStopAndLine(stop_id, line_id) {\n    validate.arguments([{\n      name: 'stop',\n      value: stop_id,\n      type: 'number',\n      notEmpty: true,\n      optional: false\n    }, {\n      name: 'line',\n      value: line_id,\n      type: 'number',\n      notEmpty: true,\n      optional: false\n    }]);\n    let buses = [];\n    let upcomingBuses = [];\n    return iBusApi.retrieveLineId(stop_id, line_id).then(response => {\n      const ibus = response.data.ibus;\n      if (ibus.length === 0) throw new NoDataError('no data recived');\n      return ibus.map((bus, index) => {\n        const t_in_min = bus[\"t-in-min\"],\n              t_in_s = bus[\"t-in-s\"],\n              text_ca = bus[\"text-ca\"];\n        buses[index] = {\n          line_id,\n          t_in_min,\n          t_in_s,\n          text_ca\n        };\n        return transitApi.retrieveBusLine(line_id);\n      });\n    }).then(res => Promise.all(res).then(response => {\n      return response.map(({\n        features\n      }) => {\n        return features.map(({\n          properties: {\n            \"CODI_LINIA\": line_id,\n            \"NOM_LINIA\": name_line,\n            \"DESC_LINIA\": desc_line,\n            \"ORIGEN_LINIA\": origin_line,\n            \"DESTI_LINIA\": dest_line,\n            \"COLOR_LINIA\": color_line\n          }\n        }) => {\n          return {\n            line_id,\n            name_line,\n            desc_line,\n            origin_line,\n            dest_line,\n            color_line\n          };\n        });\n      });\n    })).then(resp => {\n      resp.map(arr => {\n        upcomingBuses.push({\n          line: buses[0].line_id,\n          t_in_min: buses[0].t_in_min,\n          t_in_s: buses[0].t_in_s,\n          text_ca: buses[0].text_ca,\n          color_line: arr[0].color_line,\n          dest_line: arr[0].dest_line,\n          name_line: arr[0].name_line,\n          desc_line: arr[0].desc_line,\n          origin_line: arr[0].origin_line\n        });\n      });\n      return transitApi.retrieveStop(stop_id);\n    }).then(response => {\n      let busesData = [];\n\n      const _response$features2 = _slicedToArray(response.features, 1),\n            _response$features2$ = _response$features2[0].properties,\n            _stop_id = _response$features2$[\"CODI_PARADA\"],\n            _stop_name = _response$features2$[\"NOM_PARADA\"];\n\n      busesData.push({\n        line: upcomingBuses[0].line,\n        t_in_min: upcomingBuses[0].t_in_min,\n        t_in_s: upcomingBuses[0].t_in_s,\n        text_ca: upcomingBuses[0].text_ca,\n        color_line: upcomingBuses[0].color_line,\n        dest_line: upcomingBuses[0].dest_line,\n        name_line: upcomingBuses[0].name_line,\n        desc_line: upcomingBuses[0].desc_line,\n        origin_line: upcomingBuses[0].origin_line,\n        stop_id: _stop_id,\n        stop_name: _stop_name\n      });\n      return busesData;\n    });\n  }\n\n};\nexport default logic;","map":{"version":3,"sources":["/Users/didactor/Documents/skylab/bootcamp/collab/skylab-bootcamp-201904/staff/groups/aldi/siempre-tarde/src/logic/index.js"],"names":["normalize","validate","userApi","LogicError","DirectionError","PasswordError","NoDataError","iBusApi","transitApi","logic","__userId__","id","sessionStorage","userId","undefinedOrNull","__userToken__","token","userToken","isUserLoggedIn","registerUser","name","surname","email","password","password2","arguments","value","type","notEmpty","create","then","response","status","error","loginUser","authenticate","data","retrieveUser","retrieve","username","logoutUser","clear","toggleFavStop","stop_id","aldiFavorites","index","indexOf","push","splice","update","retrieveFavStops","aldiFav","length","calls","map","retrieveStop","Promise","all","features","properties","stop_name","retrieveBusLines","line_id","optional","retrieveBusLine","name_line","desc_line","origin_line","dest_line","color_line","retrieveBusLineRoute","direction_id","direction_name","retrieveBusStops","stops","forEach","e","direction","upcomingBusesByStop","buses","_stop_name","retrieveStopId","ibus","bus","line","t_in_min","t_in_s","text_ca","res","resp","upcomingBuses","arr","lineFind","i","upcomingBusesByStopAndLine","retrieveLineId","busesData","_stop_id"],"mappings":"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","sourcesContent":["import normalize from '../common/normalize'\nimport validate from '../common/validate'\nimport userApi from '../data/user-api'\nimport { LogicError, DirectionError, PasswordError, NoDataError } from '../common/errors'\nimport iBusApi from '../data/ibus-api'\nimport transitApi from '../data/transit-api'\n\n\n\nconst logic = {\n\n    set __userId__(id) {\n        sessionStorage.userId = id\n    },\n\n    get __userId__() {\n        return normalize.undefinedOrNull(sessionStorage.userId)\n    },\n\n    set __userToken__(token) {\n        sessionStorage.userToken = token\n    },\n\n    get __userToken__() {\n        return normalize.undefinedOrNull(sessionStorage.userToken)\n    },\n\n    get isUserLoggedIn() {\n        return !!(this.__userId__ && this.__userToken__)\n    },\n\n    registerUser(name, surname, email, password, password2) {\n\n        validate.arguments([\n            { name: 'name', value: name, type: 'string', notEmpty: true },\n            { name: 'surname', value: surname, type: 'string', notEmpty: true },\n            { name: 'email', value: email, type: 'string', notEmpty: true },\n            { name: 'password', value: password, type: 'string', notEmpty: true },\n            { name: 'password2', value: password2, type: 'string', notEmpty: true }\n        ])\n\n        validate.email(email)\n\n        if (password !== password2) throw new PasswordError(\"Password don't match\")\n\n        return userApi.create(email, password, { name, surname })\n            .then(response => {\n                if (response.status === 'OK') return\n\n                throw new LogicError(response.error)\n            })\n    },\n\n    loginUser(email, password) {\n        validate.arguments([\n            { name: 'email', value: email, type: 'string', notEmpty: true },\n            { name: 'password', value: password, type: 'string', notEmpty: true }\n        ])\n\n        validate.email(email)\n\n        return userApi.authenticate(email, password)\n            .then(response => {\n                if (response.status === 'OK') {\n                    const { data: { id, token } } = response\n\n                    this.__userId__ = id\n                    this.__userToken__ = token\n                } else throw new LogicError(response.error)\n            })\n    },\n\n    retrieveUser() {\n        return userApi.retrieve(this.__userId__, this.__userToken__)\n            .then(response => {\n                if (response.status === 'OK') {\n                    const { data: { name, surname, username: email } } = response\n\n                    return { name, surname, email }\n                } else throw new LogicError(response.error)\n            })\n    },\n\n    logoutUser() {\n        sessionStorage.clear()\n    },\n\n\n    toggleFavStop(stop_id) {\n\n        validate.arguments([\n            { name: 'stop', value: stop_id, type: 'number' }\n        ])\n\n        return userApi.retrieve(this.__userId__, this.__userToken__)\n            .then(response => {\n                const { status, data } = response\n\n                if (status === 'OK') {\n                    const { aldiFavorites = [] } = data\n\n                    const index = aldiFavorites.indexOf(stop_id)\n\n                    if (index < 0) aldiFavorites.push(stop_id)\n                    else aldiFavorites.splice(index, 1)\n\n                    return userApi.update(this.__userId__, this.__userToken__, { aldiFavorites })\n                        .then(() => { })\n                }\n\n                throw new LogicError(response.error)\n            })\n\n    },\n\n\n    retrieveFavStops() {\n\n        let aldiFav = []\n        return userApi.retrieve(this.__userId__, this.__userToken__)\n            .then(response => {\n                debugger\n                const { status, data } = response\n\n                if (status === 'OK') {\n                    const { aldiFavorites = [] } = data\n\n                    if (aldiFavorites.length) {\n                        const calls = aldiFavorites.map(stop_id => transitApi.retrieveStop(stop_id))\n                        debugger\n                        return Promise.all(calls).then(response => {\n                            return response.map(({ features: [{ properties: { \"CODI_PARADA\": stop_id, \"NOM_PARADA\": stop_name } }] }) => ({ stop_id, stop_name }))\n                        })\n                    } else {\n                        return aldiFavorites\n                    }\n\n                } else throw new LogicError(response.error)\n            })\n    },\n\n\n    retrieveBusLines(line_id) {\n\n        validate.arguments([\n            { name: 'line_id', value: line_id, type: 'number', notEmpty: true, optional: true }\n        ])\n        debugger\n        return transitApi.retrieveBusLine(line_id)\n            .then(response => {\n                const { features } = response\n\n                return features.map(({ properties:\n                    { \"CODI_LINIA\": line_id,\n                        \"NOM_LINIA\": name_line,\n                        \"DESC_LINIA\": desc_line,\n                        \"ORIGEN_LINIA\": origin_line,\n                        \"DESTI_LINIA\": dest_line,\n                        \"COLOR_LINIA\": color_line\n                    }\n                }) => {\n                    return { line_id, name_line, desc_line, origin_line, dest_line, color_line }\n                })\n            })\n    },\n\n\n    retrieveBusLineRoute(line_id) {\n\n        validate.arguments([\n            { name: 'line_id', value: line_id, type: 'number', notEmpty: true, optional: false }\n        ])\n\n        return transitApi.retrieveBusLineRoute(line_id)\n            .then(response => {\n                const { features } = response\n\n                return features.map(({ properties:\n                    { \"SENTIT\": direction_id,\n                        \"DESTI_SENTIT\": direction_name\n                    }\n                }) => {\n                    return { direction_id, direction_name }\n                })\n            })\n    },\n\n\n    retrieveBusStops(line_id, direction_id) {\n\n        validate.arguments([\n            { name: 'line_id', value: line_id, type: 'number', notEmpty: true, optional: false },\n            { name: 'direction_id', value: direction_id, type: 'string', notEmpty: true, optional: false }\n        ])\n\n        if (direction_id !== 'A' && direction_id !== 'T') { throw new DirectionError('direction is not valid') }\n\n\n        return transitApi.retrieveBusStops(line_id)\n            .then(response => {\n                const { features } = response\n\n                let stops = []\n\n                features.forEach(e => {\n                    const { properties:\n                        { \"CODI_PARADA\": stop_id,\n                            \"NOM_PARADA\": stop_name,\n                            \"SENTIT\": direction\n                        }\n                    } = e\n                    if (direction === direction_id) {\n                        stops.push({ stop_id, stop_name })\n                    }\n\n                })\n\n                return stops\n            })\n    },\n\n    upcomingBusesByStop(stop_id) {\n\n        validate.arguments([\n            { name: 'stop', value: stop_id, type: 'number', notEmpty: true, optional: false }\n        ])\n\n        let buses = []\n        let stop_name = ''\n\n        return transitApi.retrieveStop(stop_id)\n            .then(response => {\n                const { features: [{ properties: { \"NOM_PARADA\": _stop_name } }] } = response\n                stop_name = _stop_name\n\n                return iBusApi.retrieveStopId(stop_id)\n            })\n            .then(response => {\n\n                const { data: { ibus } } = response\n\n                if (ibus.length === 0) throw new NoDataError('no data recived')\n\n                return ibus.map((bus, index) => {\n\n                    const { line, \"t-in-min\": t_in_min, \"t-in-s\": t_in_s, \"text-ca\": text_ca } = bus\n\n                    buses[index] = { line, t_in_min, t_in_s, text_ca }\n\n                    return transitApi.retrieveBusLine()\n                })\n            })\n            .then(res => Promise.all(res).then(response => {\n                return response.map(({ features }) => {\n                    return features.map(({ properties:\n                        { \"CODI_LINIA\": line_id,\n                            \"NOM_LINIA\": name_line,\n                            \"DESC_LINIA\": desc_line,\n                            \"ORIGEN_LINIA\": origin_line,\n                            \"DESTI_LINIA\": dest_line,\n                            \"COLOR_LINIA\": color_line\n                        }\n                    }) => {\n                        return { line_id, name_line, desc_line, origin_line, dest_line, color_line }\n                    })\n                })\n            })\n            )\n            .then(resp => {\n                let upcomingBuses = []\n                resp.map((arr, index) => {\n                    let lineFind = false\n                    let i = 0\n                    let color_line = '#000000'\n                    let dest_line = ''\n                    let name_line = ''\n                    let desc_line = ''\n                    let origin_line = ''\n\n                    while (i < arr.length && !lineFind) {\n                        if (arr[i].name_line === buses[index].line) {\n                            color_line = arr[i].color_line\n                            dest_line = arr[i].dest_line\n                            name_line = arr[i].name_line\n                            desc_line = arr[i].desc_line\n                            origin_line = arr[i].origin_line\n                            lineFind = true\n                        }\n                        else { i++ }\n                    }\n                    upcomingBuses.push({\n                        line: buses[index].line,\n                        t_in_min: buses[index].t_in_min,\n                        t_in_s: buses[index].t_in_s,\n                        text_ca: buses[index].text_ca,\n                        color_line,\n                        dest_line,\n                        name_line,\n                        desc_line,\n                        origin_line,\n                        stop_id,\n                        stop_name: stop_name\n                    })\n\n                })\n                return upcomingBuses\n            })\n    },\n\n\n\n    upcomingBusesByStopAndLine(stop_id, line_id) {\n\n        validate.arguments([\n            { name: 'stop', value: stop_id, type: 'number', notEmpty: true, optional: false },\n            { name: 'line', value: line_id, type: 'number', notEmpty: true, optional: false }\n        ])\n\n        let buses = []\n\n        let upcomingBuses = []\n\n        return iBusApi.retrieveLineId(stop_id, line_id)\n            .then(response => {\n\n                const { data: { ibus } } = response\n\n                if (ibus.length === 0) throw new NoDataError('no data recived')\n\n                return ibus.map((bus, index) => {\n\n                    const { \"t-in-min\": t_in_min, \"t-in-s\": t_in_s, \"text-ca\": text_ca } = bus\n\n\n                    buses[index] = { line_id, t_in_min, t_in_s, text_ca }\n\n                    return transitApi.retrieveBusLine(line_id)\n                })\n            })\n            .then(res => Promise.all(res).then(response => {\n\n                return response.map(({ features }) => {\n                    return features.map(({ properties:\n                        { \"CODI_LINIA\": line_id,\n                            \"NOM_LINIA\": name_line,\n                            \"DESC_LINIA\": desc_line,\n                            \"ORIGEN_LINIA\": origin_line,\n                            \"DESTI_LINIA\": dest_line,\n                            \"COLOR_LINIA\": color_line\n                        }\n                    }) => { return { line_id, name_line, desc_line, origin_line, dest_line, color_line } })\n                })\n            })\n            )\n            .then(resp => {\n\n                resp.map((arr) => {\n                    upcomingBuses.push({\n                        line: buses[0].line_id,\n                        t_in_min: buses[0].t_in_min,\n                        t_in_s: buses[0].t_in_s,\n                        text_ca: buses[0].text_ca,\n                        color_line: arr[0].color_line,\n                        dest_line: arr[0].dest_line,\n                        name_line: arr[0].name_line,\n                        desc_line: arr[0].desc_line,\n                        origin_line: arr[0].origin_line\n                    })\n                })\n\n                return transitApi.retrieveStop(stop_id)\n            })\n            .then(response => {\n\n                let busesData = []\n\n                const { features: [{ properties: { \"CODI_PARADA\": _stop_id, \"NOM_PARADA\": _stop_name } }] } = response\n\n                busesData.push({\n                    line: upcomingBuses[0].line,\n                    t_in_min: upcomingBuses[0].t_in_min,\n                    t_in_s: upcomingBuses[0].t_in_s,\n                    text_ca: upcomingBuses[0].text_ca,\n                    color_line: upcomingBuses[0].color_line,\n                    dest_line: upcomingBuses[0].dest_line,\n                    name_line: upcomingBuses[0].name_line,\n                    desc_line: upcomingBuses[0].desc_line,\n                    origin_line: upcomingBuses[0].origin_line,\n                    stop_id: _stop_id,\n                    stop_name: _stop_name\n                })\n                return busesData\n            }\n\n            )\n    }\n\n\n}\n\nexport default logic"]},"metadata":{},"sourceType":"module"}