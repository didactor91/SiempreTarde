{"ast":null,"code":"import validate from '../../common/validate';\nimport call from '../../common/call';\nimport { NotFoundError, ConnectionError } from '../../common/errors';\nconst transitApi = {\n  APP_ID: null,\n  APP_KEY: null,\n  __url__: 'https://api.tmb.cat/v1/transit/linies/bus',\n  __timeout__: 0,\n\n  retrieveBusLine(line_id) {\n    validate.arguments([{\n      name: 'line',\n      value: line_id,\n      type: 'number',\n      notEmpty: true,\n      optional: true\n    }]);\n    let path = '';\n    if (line_id) path = line_id;\n    return call(\"\".concat(this.__url__, \"/\").concat(path, \"?app_id=\").concat(this.APP_ID, \"&app_key=\").concat(this.APP_KEY), {\n      timeout: this.__timeout__\n    }).then(response => {\n      if (response.status === 200) {\n        debugger;\n        return response.json();\n      }\n\n      if (response.status === 404) throw new NotFoundError('cannot found');\n      if (response.status === 403) throw new ConnectionError('cannot connect');\n    }).then(response => {\n      if (response.totalFeatures === 0) {\n        throw new NotFoundError('cannot found');\n      } else {\n        return response;\n      }\n    });\n  },\n\n  retrieveBusLineRoute(line_id) {\n    validate.arguments([{\n      name: 'line',\n      value: line_id,\n      type: 'number',\n      notEmpty: true,\n      optional: false\n    }]);\n    return call(\"\".concat(this.__url__, \"/\").concat(line_id, \"/recs?app_id=\").concat(this.APP_ID, \"&app_key=\").concat(this.APP_KEY), {\n      timeout: this.__timeout__\n    }).then(response => {\n      if (response.status === 200) {\n        debugger;\n        return response.json();\n      }\n\n      if (response.status === 404) throw new NotFoundError('cannot found');\n      if (response.status === 403) throw new ConnectionError('cannot connect');\n    }).then(response => {\n      if (response.totalFeatures === 0) {\n        throw new NotFoundError('cannot found');\n      } else {\n        return response;\n      }\n    });\n  },\n\n  retrieveBusStops(line_id) {\n    validate.arguments([{\n      name: 'line',\n      value: line_id,\n      type: 'number',\n      notEmpty: true,\n      optional: false\n    }]);\n    let path = '';\n    if (line_id) path = line_id;\n    return call(\"\".concat(this.__url__, \"/\").concat(line_id, \"/parades?app_id=\").concat(this.APP_ID, \"&app_key=\").concat(this.APP_KEY), {\n      timeout: this.__timeout__\n    }).then(response => {\n      if (response.status === 200) {\n        debugger;\n        return response.json();\n      }\n\n      if (response.status === 404) throw new NotFoundError('cannot found');\n      if (response.status === 403) throw new ConnectionError('cannot connect');\n    }).then(response => {\n      if (response.totalFeatures === 0) {\n        throw new NotFoundError('cannot found');\n      } else {\n        return response;\n      }\n    });\n  }\n\n};\nexport default transitApi;","map":{"version":3,"sources":["/Users/didactor/Documents/skylab/bootcamp/collab/skylab-bootcamp-201904/staff/groups/aldi/siempre-tarde/src/data/transit-api/index.js"],"names":["validate","call","NotFoundError","ConnectionError","transitApi","APP_ID","APP_KEY","__url__","__timeout__","retrieveBusLine","line_id","arguments","name","value","type","notEmpty","optional","path","timeout","then","response","status","json","totalFeatures","retrieveBusLineRoute","retrieveBusStops"],"mappings":"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","sourcesContent":["import validate from '../../common/validate'\nimport call from '../../common/call'\nimport { NotFoundError, ConnectionError } from '../../common/errors';\n\n\nconst transitApi = {\n    APP_ID: null,\n    APP_KEY: null,\n\n\n    __url__: 'https://api.tmb.cat/v1/transit/linies/bus',\n    __timeout__: 0,\n\n    \n    retrieveBusLine(line_id) {\n        validate.arguments([\n            { name: 'line', value: line_id, type: 'number', notEmpty: true, optional: true }\n        ])\n\n        let path = ''\n        if (line_id) path = line_id\n        return call(`${this.__url__}/${path}?app_id=${this.APP_ID}&app_key=${this.APP_KEY}`, {\n            timeout: this.__timeout__\n        })\n        .then(response => {\n            if (response.status === 200) { \n                debugger\n                return response.json()\n            }  \n            if (response.status === 404) throw new NotFoundError('cannot found')\n            if (response.status === 403) throw new ConnectionError('cannot connect')  \n        })\n        .then( response =>{\n            if (response.totalFeatures === 0){ \n                throw new NotFoundError('cannot found')\n            }else { return response }\n        })\n\n    },\n\n    \n    retrieveBusLineRoute(line_id) {\n        validate.arguments([\n            { name: 'line', value: line_id, type: 'number', notEmpty: true, optional: false }\n        ])\n\n        return call(`${this.__url__}/${line_id}/recs?app_id=${this.APP_ID}&app_key=${this.APP_KEY}`, {\n            timeout: this.__timeout__\n        })\n        .then(response => {\n            if (response.status === 200) { \n                debugger\n                return response.json()\n            }  \n            if (response.status === 404) throw new NotFoundError('cannot found')\n            if (response.status === 403) throw new ConnectionError('cannot connect')  \n        })\n        .then( response =>{\n            if (response.totalFeatures === 0){ \n                throw new NotFoundError('cannot found')\n            }else { return response }\n        })\n    },\n\n\n    \n    retrieveBusStops(line_id) {\n        validate.arguments([\n            { name: 'line', value: line_id, type: 'number', notEmpty: true, optional: false }\n        ])\n\n        let path = ''\n        if (line_id) path = line_id\n        return call(`${this.__url__}/${line_id}/parades?app_id=${this.APP_ID}&app_key=${this.APP_KEY}`, {\n            timeout: this.__timeout__\n        })\n        .then(response => {\n            if (response.status === 200) { \n                debugger\n                return response.json()\n            }  \n            if (response.status === 404) throw new NotFoundError('cannot found')\n            if (response.status === 403) throw new ConnectionError('cannot connect')  \n        })\n        .then( response =>{\n            if (response.totalFeatures === 0){ \n                throw new NotFoundError('cannot found')\n            }else { return response }\n        })\n    },\n\n\n}\n\nexport default transitApi"]},"metadata":{},"sourceType":"module"}